1 => Entities Katmaný => Microsoft.AspNetCore.Identity.EntityFrameworkCore kütüphanesi bizim Identity sýnýflarýmýzý kullanabilmek icin indirmemiz gereken bir kütüphanedir...AppUser class'ýna dikkat ederseniz IdentityUser<int> class'ýndan miras almýstýr. Bu class bu kütüphaneden gelir...

2 => Configurations katmanýna EFCore Sql Server kütüphanesi indirilir...Configurations classlarý tanýmlanýr...

3 => DAL Katmanýna gecilir...Conf katmanýndan referans alýnýr(Sadece CONF katmanýndan referans alýnmasý yeterli olacaktýr cünkü CONF'in icerisindeki referanslar da zincirleme gelecektir)..EF Core Tools ve Proxies kütüphaneleri indirilmek zorundadýr...Ondan sonra MyContext yapýmýzý tasarlarken Extensions klasorunde static class'larýmýz düz static metotlarýmýzý olusturuyoruz(Identity kütüphanesine bagýmlýlýgýmýzdan dolayý extension metot yaratmak istemedik)..Bunun icin Bogus kütüphanesini de bu katmana indirdik...Extension sýnýflarýmýzdaki statik metotlarý Context sýnýfýndaki OnMOdelCreating'de kullandýk...Sonra olusturdugumuz Repositories klasorunu ve icerigini bir süre askýya alarak BLL tarafýna gectik ki DbContext ve Identity Servislerimiz inject edilsin ki veritabanýmýzýn ayaga kalktýgýný rahatca gözlemleyelim

4 => BLL katmanýna gectigimizde öncelikle DAL katmanýndan referans aldýk...Context servisimizi ve Identity servisimizi tanýmlamak adýna ServiceInjections isimli klasoru actýk ve burada Extension metotlar yaratarak servislerimizin Matematik'ini bu classlara yazdýk...Ayný zamanda Identity Service'imizdeki AddIdentity metodunu kullanabilmek icin FluentValidation.AspNetCore kütüphanesine de indirdik... Sonra UI katmanýna gecerek BLL'den referans aldýk ve program.cs'de olusturdugumuz servisleri inject ettik... Ayný zamanda UI'a (startup olarak ayarlanan projemize) Microsoft.EntityFrameworkCore.Design kütüphanesini indirdik cünkü Identity'i EF'den bagýmsýz bir katmanda inject ettik...

5 => DAL Katmanýna dönerek Repositories klasoründe Abstract ve Concrete repository'lerimizi yazmaya basladýk...  Sonra BLL'deki ServiceInjections'a bu Repository icin IOC tanýmlamasý yapýyoruz...

6 => BLL tarafýnda Manager Servislerimizi yazarak sonra onlarýn IOC tanýmlamalarýný yapýyoruz...

7 => Common katmanýnda Mail gondermek icin kullanacagýmýz class olusturulur... Comomon'da lütfen metotlar ilgili bilgileri tekrar edin ve iyi calýsýn... MailService class'ý static bir þekilde burada olusturulur...

8 => MVCUI katmanýna gecilir...ManagerService ve RepService IOC matematigi middleware'e BLL alýnarak yazýlýr...Model klasoru icerisine de SessionService klasoru acularak onun icerisine SessionExtension class'i acýlýr.. Newtonsoft Json kütüphanesini de indirmeyi unutmayýn... Sonra Cart ve CartItem sýnýflarý tasarlanýr...

9 => UI'daki wwwroot klasorune FlatAdmin icerisindeki dosyalarý kopyaladýk...Index'teki section class wrapper icindeki elementleri silerek Layout'a verdik...Sonra css, js ve asset dosyalarý icin path tanýmlamasýný düzelttik...

10 => HomeController icerisinde Register Action'ini acarak Register islemlerine basladýk...Bu noktada AppUser class'imiza ActivationCode isminde Guid tipinde bir property ekledik...

11 => Admin Area'sý acarak program.cs'teki ilgili ayarlamalarýný yaptýk...Admin Area'nýn icerisindeki Views klasorune ViewImport ve ViewStart ekledik...Layout ekleyerek onun icerisine FlatAdmin template'indeki Advanced DataTable'i verdik ve section class wrapper'in icerigini Admin'deki Category Controller'inin icerisindeki Index'e alarak RenderBody'i layout'a tamamladýk...Ondan sonra Category CRUD iþlemlerini yaptýk... Sonra Product Crud iþlemlerini (Resim yükleme ile birlikte gerçekleþtirdik)

12 => Area'dan cýkýp ShoppingController'a basladýk...

13 => X.PagedList X.PagedList.Mvc.Core kütüphanelerini UI katmanýmýza indiriyoruz...Ayný zamanda namespace'lerini ViewImports'a ekliyoruz...

14 => Urunlerimizi PagedList ile birlikte sayfalandýrarak listeledikten sonra ürünlerimizin sepete eklenebilmesi adýna ilgili tasarýmý yaparak Sepete Ekleme Action'ini yazdýk... 

15 => CartPage sistemimizi (Sepet sayfasý) kurmak adýna LayOut'a RenderSection tanýmladýk ve öncelikle sepet sayfasýna ulasmak adýna buraya bir link verdik. Sonra CartPage'imizi Vmlerimizin de desteðiyle olusturduk (Bu noktada Order ile ilgili ve Outer classlarýmýz ile ilgili VM'lerimizi actýk...)


16 => CartPage sistemimizi kurduktan sonra Sipariþimizi onaylayabilmek icin ConfirmOrder action'ini actýk...Burada PaymentRequestModel'imizi unutmuyoruz... 

17 => ConfirmOrder Post action'inda öncelikle bankadan bagýmsýz iþlemlerimizi gerçekleþtirerek test ettik...

18 => Bir Core API projesi acarak bankayý olusturmaya basladýk...Seed Data ekledik Code First ile migration yaparken invariant globalization'a dikkat ediyoruz... Ayný zamanda Cord policesini yazdýk...E-Ticaret projemizde de middleware'de AddHttpClient() sistemini eklemeyi unutmuyoruz...

19 => Banka projemizi tamamladýktan sonra ConfirmOrder post action'imizda statuscode'lari kontrol ederek bir düzenleme yapýyoruz...