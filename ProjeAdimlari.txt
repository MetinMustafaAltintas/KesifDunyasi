1 => Entities Katmaný => Microsoft.AspNetCore.Identity.EntityFrameworkCore kütüphanesi bizim Identity sýnýflarýmýzý kullanabilmek icin indirmemiz gereken bir kütüphanedir...AppUser class'ýna dikkat ederseniz IdentityUser<int> class'ýndan miras almýstýr. Bu class bu kütüphaneden gelir...

2 => Configurations katmanýna EFCore Sql Server kütüphanesi indirilir...Configurations classlarý tanýmlanýr...

3 => DAL Katmanýna gecilir...Conf katmanýndan referans alýnýr(Sadece CONF katmanýndan referans alýnmasý yeterli olacaktýr cünkü CONF'in icerisindeki referanslar da zincirleme gelecektir)..EF Core Tools ve Proxies kütüphaneleri indirilmek zorundadýr...Ondan sonra MyContext yapýmýzý tasarlarken Extensions klasorunde static class'larýmýz düz static metotlarýmýzý olusturuyoruz(Identity kütüphanesine bagýmlýlýgýmýzdan dolayý extension metot yaratmak istemedik)..Bunun icin Bogus kütüphanesini de bu katmana indirdik...Extension sýnýflarýmýzdaki statik metotlarý Context sýnýfýndaki OnMOdelCreating'de kullandýk...Sonra olusturdugumuz Repositories klasorunu ve icerigini bir süre askýya alarak BLL tarafýna gectik ki DbContext ve Identity Servislerimiz inject edilsin ki veritabanýmýzýn ayaga kalktýgýný rahatca gözlemleyelim

4 => BLL katmanýna gectigimizde öncelikle DAL katmanýndan referans aldýk...Context servisimizi ve Identity servisimizi tanýmlamak adýna ServiceInjections isimli klasoru actýk ve burada Extension metotlar yaratarak servislerimizin Matematik'ini bu classlara yazdýk...Ayný zamanda Identity Service'imizdeki AddIdentity metodunu kullanabilmek icin FluentValidation.AspNetCore kütüphanesine de indirdik... Sonra UI katmanýna gecerek BLL'den referans aldýk ve program.cs'de olusturdugumuz servisleri inject ettik... Ayný zamanda UI'a (startup olarak ayarlanan projemize) Microsoft.EntityFrameworkCore.Design kütüphanesini indirdik cünkü Identity'i EF'den bagýmsýz bir katmanda inject ettik...