// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.DAL.ContextClasses;

#nullable disable

namespace Project.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20240516182917_Init1")]
    partial class Init1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "f95d0995-b517-4a57-b014-93291bb51268",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ActivationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d895f34c-32b0-44cf-806d-efb543015175",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(8509),
                            Email = "metinmustafaaltintas@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "METINMUSTAFAALTINTAS@GMAIL.COM",
                            NormalizedUserName = "METIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHn2InUbbx8uEDTG1Msi8Bz39xVEeVmeh2ERGAtAkw3qdgAz4+k85wi17OywQtzWsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57ccfbbf-716d-4e3b-abad-8063979787d2",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "metin"
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUserProfile", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Shoes",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(5506),
                            Description = "Ex lambadaki sarmal sandalye un ut çorba qui consequatur inventore.",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Sports",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(5922),
                            Description = "Dağılımı için non ea quis et doğru consequatur rem voluptatem.",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Jewelery",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(6005),
                            Description = "Ekşili consequuntur consectetur bilgisayarı architecto ullam sıradanlıktan mi exercitationem explicabo.",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Books",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(6088),
                            Description = "Makinesi lambadaki quia iusto exercitationem in uzattı velit duyulmamış aliquam.",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Toys",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(6160),
                            Description = "Magnam magni odit bundan domates umut rem türemiş gülüyorum enim.",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Games",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(6233),
                            Description = "Gördüm ut oldular lambadaki odio incidunt quis ipsum ea architecto.",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Computers",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(6302),
                            Description = "Oldular consequuntur voluptas voluptate odio masanın ex düşünüyor voluptatem corporis.",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Sports",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(6379),
                            Description = "Gülüyorum camisi eaque voluptatem sit aut suscipit ad öyle quia.",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Shoes",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(6447),
                            Description = "Camisi consequuntur suscipit beğendim dicta gitti mıknatıslı ut et quaerat.",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Books",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(6514),
                            Description = "Sed iusto incidunt ut voluptatem nisi consequatur sequi ducimus fugit.",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AppUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceOfOrder")
                        .HasColumnType("money");

                    b.Property<int?>("ShipperID")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("ShipperID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(6660),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Refined Soft Hat",
                            Status = 1,
                            UnitPrice = 936.98m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(6940),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Tasty Fresh Chips",
                            Status = 1,
                            UnitPrice = 821.96m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7035),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Practical Rubber Chair",
                            Status = 1,
                            UnitPrice = 435.76m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7120),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Handmade Wooden Chair",
                            Status = 1,
                            UnitPrice = 881.02m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7199),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Intelligent Frozen Gloves",
                            Status = 1,
                            UnitPrice = 607.18m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7290),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Rustic Steel Cheese",
                            Status = 1,
                            UnitPrice = 788.21m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 7,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7373),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Awesome Soft Fish",
                            Status = 1,
                            UnitPrice = 612.82m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 8,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7453),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Sleek Rubber Bike",
                            Status = 1,
                            UnitPrice = 17.40m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 9,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7533),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Awesome Frozen Sausages",
                            Status = 1,
                            UnitPrice = 489.98m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 10,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7616),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Unbranded Wooden Chips",
                            Status = 1,
                            UnitPrice = 532.01m,
                            UnitsInStock = 100
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.ProductAndProductAttribute", b =>
                {
                    b.Property<int>("ProductAttributeID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductAttributeID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductAndProductAttributes");

                    b.HasData(
                        new
                        {
                            ProductAttributeID = 1,
                            ProductID = 1,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(8012),
                            Status = 1,
                            Value = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality"
                        },
                        new
                        {
                            ProductAttributeID = 2,
                            ProductID = 2,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(8051),
                            Status = 1,
                            Value = "The Football Is Good For Training And Recreational Purposes"
                        },
                        new
                        {
                            ProductAttributeID = 3,
                            ProductID = 3,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(8072),
                            Status = 1,
                            Value = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality"
                        },
                        new
                        {
                            ProductAttributeID = 4,
                            ProductID = 4,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(8091),
                            Status = 1,
                            Value = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit"
                        },
                        new
                        {
                            ProductAttributeID = 5,
                            ProductID = 5,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(8109),
                            Status = 1,
                            Value = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles"
                        },
                        new
                        {
                            ProductAttributeID = 6,
                            ProductID = 6,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(8129),
                            Status = 1,
                            Value = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support"
                        },
                        new
                        {
                            ProductAttributeID = 7,
                            ProductID = 7,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(8147),
                            Status = 1,
                            Value = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart"
                        },
                        new
                        {
                            ProductAttributeID = 8,
                            ProductID = 8,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(8166),
                            Status = 1,
                            Value = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles"
                        },
                        new
                        {
                            ProductAttributeID = 9,
                            ProductID = 9,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(8185),
                            Status = 1,
                            Value = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J"
                        },
                        new
                        {
                            ProductAttributeID = 10,
                            ProductID = 10,
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(8205),
                            Status = 1,
                            Value = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals"
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.ProductAttribute", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ProductAttributes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AttributeName = "Concrete",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7756),
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            AttributeName = "Granite",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7789),
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            AttributeName = "Fresh",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7809),
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            AttributeName = "Wooden",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7829),
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            AttributeName = "Fresh",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7848),
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            AttributeName = "Metal",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7869),
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            AttributeName = "Metal",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7888),
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            AttributeName = "Fresh",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7908),
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            AttributeName = "Fresh",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7927),
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            AttributeName = "Steel",
                            CreatedDate = new DateTime(2024, 5, 16, 21, 29, 16, 554, DateTimeKind.Local).AddTicks(7948),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Shipper", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUserProfile", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", "AppUser")
                        .WithOne("Profile")
                        .HasForeignKey("Project.ENTITIES.Models.AppUserProfile", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Order", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserID");

                    b.HasOne("Project.ENTITIES.Models.Shipper", "Shipper")
                        .WithMany("Orders")
                        .HasForeignKey("ShipperID");

                    b.Navigation("AppUser");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.OrderDetail", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Product", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.ProductAndProductAttribute", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductAttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.Product", "Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Product", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributes");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Shipper", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
