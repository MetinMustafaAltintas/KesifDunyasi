// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.DAL.ContextClasses;

#nullable disable

namespace Project.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20240508202742_Init1")]
    partial class Init1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "7249832f-daf1-4c18-8ded-bc453c049ad8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ActivationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95c8efe0-9c73-48c6-b5e2-6025a43fae7c",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(6506),
                            Email = "metinmustafaaltintas@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "METINMUSTAFAALTINTAS@GMAIL.COM",
                            NormalizedUserName = "METIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELSesC7nj2fxRw0fE7yNYcEiJd4KYISXdPnZRyDW7U1W6+vxTKEkEl8pCYTLRrO1fg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d1c1198-762d-4044-ac7c-af1dd610ead3",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "metin"
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUserProfile", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Grocery",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(2262),
                            Description = "Oldular beğendim çünkü ut düşünüyor aut gitti tempora uzattı numquam.",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Industrial",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(3468),
                            Description = "Koyun çobanın teldeki ve çobanın voluptatem dolor in ut dolore.",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Movies",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(3753),
                            Description = "Corporis consequatur adresini consectetur esse aut quaerat adresini beatae ışık.",
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            CategoryName = "Garden",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(3828),
                            Description = "Oldular göze ama voluptatum enim türemiş ad consequatur sed kalemi.",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            CategoryName = "Tools",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(4070),
                            Description = "Voluptatem oldular sequi eos corporis bahar gitti iure gül sequi.",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            CategoryName = "Jewelery",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(4153),
                            Description = "Nisi reprehenderit inventore magnam iure ratione anlamsız perferendis ratione bilgiyasayarı.",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            CategoryName = "Music",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(4228),
                            Description = "Odio labore amet praesentium velit kulu numquam sandalye dolor adresini.",
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            CategoryName = "Grocery",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(4297),
                            Description = "Batarya ea ekşili aliquam quasi düşünüyor qui ötekinden kapının umut.",
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            CategoryName = "Computers",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(4364),
                            Description = "Fugit in ab doğru voluptatum dignissimos de mutlu dağılımı accusantium.",
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            CategoryName = "Music",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(4441),
                            Description = "Değerli aliquam sed voluptate çünkü voluptate amet dicta praesentium için.",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AppUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceOfOrder")
                        .HasColumnType("money");

                    b.Property<int?>("ShipperID")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("ShipperID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 1,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(4601),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Unbranded Fresh Table",
                            Status = 1,
                            UnitPrice = 303.32m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 2,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(4896),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Incredible Concrete Ball",
                            Status = 1,
                            UnitPrice = 818.01m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 3,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(4993),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Rustic Concrete Salad",
                            Status = 1,
                            UnitPrice = 62.92m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 4,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5074),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Handmade Granite Shirt",
                            Status = 1,
                            UnitPrice = 875.37m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 5,
                            CategoryID = 5,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5163),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Incredible Cotton Keyboard",
                            Status = 1,
                            UnitPrice = 11.64m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 6,
                            CategoryID = 6,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5243),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Handmade Granite Mouse",
                            Status = 1,
                            UnitPrice = 351.77m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 7,
                            CategoryID = 7,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5323),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Licensed Wooden Chicken",
                            Status = 1,
                            UnitPrice = 367.33m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 8,
                            CategoryID = 8,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5400),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Unbranded Frozen Pants",
                            Status = 1,
                            UnitPrice = 439.30m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 9,
                            CategoryID = 9,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5488),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Sleek Steel Keyboard",
                            Status = 1,
                            UnitPrice = 555.52m,
                            UnitsInStock = 100
                        },
                        new
                        {
                            ID = 10,
                            CategoryID = 10,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5571),
                            ImagePath = "http://lorempixel.com/640/480/nightlife",
                            ProductName = "Licensed Cotton Tuna",
                            Status = 1,
                            UnitPrice = 277.16m,
                            UnitsInStock = 100
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.ProductAndProductAttribute", b =>
                {
                    b.Property<int>("ProductAttributeID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductAttributeID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductAndProductAttributes");

                    b.HasData(
                        new
                        {
                            ProductAttributeID = 1,
                            ProductID = 1,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5996),
                            Status = 1,
                            Value = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive"
                        },
                        new
                        {
                            ProductAttributeID = 2,
                            ProductID = 2,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(6027),
                            Status = 1,
                            Value = "The Football Is Good For Training And Recreational Purposes"
                        },
                        new
                        {
                            ProductAttributeID = 3,
                            ProductID = 3,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(6048),
                            Status = 1,
                            Value = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design"
                        },
                        new
                        {
                            ProductAttributeID = 4,
                            ProductID = 4,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(6068),
                            Status = 1,
                            Value = "The Football Is Good For Training And Recreational Purposes"
                        },
                        new
                        {
                            ProductAttributeID = 5,
                            ProductID = 5,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(6087),
                            Status = 1,
                            Value = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit"
                        },
                        new
                        {
                            ProductAttributeID = 6,
                            ProductID = 6,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(6107),
                            Status = 1,
                            Value = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support"
                        },
                        new
                        {
                            ProductAttributeID = 7,
                            ProductID = 7,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(6127),
                            Status = 1,
                            Value = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles"
                        },
                        new
                        {
                            ProductAttributeID = 8,
                            ProductID = 8,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(6146),
                            Status = 1,
                            Value = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients"
                        },
                        new
                        {
                            ProductAttributeID = 9,
                            ProductID = 9,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(6166),
                            Status = 1,
                            Value = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J"
                        },
                        new
                        {
                            ProductAttributeID = 10,
                            ProductID = 10,
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(6194),
                            Status = 1,
                            Value = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit"
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.ProductAttribute", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ProductAttributes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AttributeName = "Fresh",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5712),
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            AttributeName = "Metal",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5746),
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            AttributeName = "Cotton",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5768),
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            AttributeName = "Concrete",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5788),
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            AttributeName = "Metal",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5808),
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            AttributeName = "Cotton",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5829),
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            AttributeName = "Fresh",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5857),
                            Status = 1
                        },
                        new
                        {
                            ID = 8,
                            AttributeName = "Plastic",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5879),
                            Status = 1
                        },
                        new
                        {
                            ID = 9,
                            AttributeName = "Plastic",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5901),
                            Status = 1
                        },
                        new
                        {
                            ID = 10,
                            AttributeName = "Granite",
                            CreatedDate = new DateTime(2024, 5, 8, 23, 27, 41, 676, DateTimeKind.Local).AddTicks(5922),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Shipper", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUserProfile", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", "AppUser")
                        .WithOne("Profile")
                        .HasForeignKey("Project.ENTITIES.Models.AppUserProfile", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Order", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserID");

                    b.HasOne("Project.ENTITIES.Models.Shipper", "Shipper")
                        .WithMany("Orders")
                        .HasForeignKey("ShipperID");

                    b.Navigation("AppUser");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.OrderDetail", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Product", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.ProductAndProductAttribute", b =>
                {
                    b.HasOne("Project.ENTITIES.Models.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductAttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.ENTITIES.Models.Product", "Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.AppUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Product", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributes");
                });

            modelBuilder.Entity("Project.ENTITIES.Models.Shipper", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
